@page "/"

@layout Layout.LoginLayout
@rendermode InteractiveServer

@using BlazorWebAssemblyApp.Authentication
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Http
@inject NavigationManager navManager
@inject User Service
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.Components.Authorization


@inject IJSRuntime js

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<div id="loginModal" class="row mt-5">
    <h1 style="text-align:center">Gestor de tareas</h1>
    <EditForm Model="@login" OnValidSubmit="onInitNew" FormName="LoginForm">
        <DataAnnotationsValidator />

        <div class="fondo col-lg-4 offset-lg-4 border">
            <div class="mb-3 text-center">
                <h3>LOGIN</h3>
            </div>

            <div class="mb-3">
                <label>Correo</label>
                <InputText @bind-Value="login.Email" class="form-control" />
                <ValidationMessage For="() => login.Email" />
            </div>

            <div class="mb-3">
                <label>Contraseña</label>
                <InputText @bind-Value="login.Password" class="form-control" />
                <ValidationMessage For="() => login.Password" />
            </div>

            <div style="text-align:center" class="mb-3">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    public LoginDTO login { get; set; } = new();
    private LoginModel isCorrect = new LoginModel();
    private bool IsAuthenticated;


    private async Task onInit()
    {
        try
        {
            isCorrect = await Service.GetUserAsync(login.Email, login.Password);

            if (isCorrect.Email != null)
            {
                var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Email, login.Email)
            };

                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var principal = new ClaimsPrincipal(identity);

                // Llama a SignInAsync antes de cualquier redirección o respuesta de contenido
               // await AuthService.SignInAsync(principal);
                navManager.NavigateTo("/Index");
            }
        }
        catch (Exception ex)
        {
            navManager.NavigateTo("/Index");
            // Registra el error en la consola de depuración
            Console.WriteLine($"Error en el método onInit(): {ex.Message}");
            // También puedes registrar el error en un archivo de registro si lo prefieres
            // logger.LogError($"Error en el método onInit(): {ex}");
        }
    }

   
    private async Task onInitNew()
    {
        try
        {
            

            var (flag, token, message) = await Service.GetUserAsync3(login.Email, login.Password);
            if (flag)
            {
                

                var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(token);

                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                if (authState.User.Identity.IsAuthenticated)
                {
                    // El usuario está autenticado, puedes continuar con la navegación
                    navManager.NavigateTo("/Index", forceLoad: true);
                }
               
            }
          
        }
        catch (Exception ex)
        {
           
        }
    }

}
